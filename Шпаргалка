Удаление базы данных
Отключаем все подключения (если база не хочет удяляться)
SELECT pg_terminate_backend(pg_stat_activity.pid)
FROM pg_stat_activity 
WHERE pg_stat_activity.datname = 'testdb'     --->название базы
    AND pid <> pg_backend_pid()

Удаляем базу
DROP DATABASE testdb





Как узнать, где база данных
--запрос
show data_directory


--переименование таблицы
ALTER TABLE sms_2 
RENAME TO sms;


--переименование стобца в таблице
ALTER TABLE product 
RENAME client_product TO client_vendor_product




JOIN (если написать просто JOIN это по умолчанию INNER)
INNER - выводятся только те данные, которые совпадают в левой и правой таблице
LEFT - выводятся все данные из левой таблицы и часть из правой (отсутствующие в правой станут как NULL)
RIGHT - выводятся все данные из правой таблицы и часть из левой (отсутствующие в левой станут как NULL)
FULL - выводятся все данные и левые и правые (отсутствующие заменятся на NULL)
CROSS - Каждая строка левой таблицы свяжется с каждой строкой правой таблицы

Эти запросы равнозначны, но второй проще. Можно использовать, если название колонок одинаковы
JOIN table2 ON table1.column = table1.column
JOIN table2 USING (column)




Посмотри на следующие коды
BEETWEEN __  AND __
IN, NOT IN
MIN, MAX
LIMIT (выводит ограниченное количество результатов
HAVING - вторичная фильтрация
INTERSECT (это как UNION но выводит только те данные, которые есть в обеих таблицах)
EXCEPT (это как UNION но выводит только те данные, которых нет во второй таблице)
colomn1 || ' ' || colomn2 - объединение данных в один столбец с пробелом
Подзапросы (попробуй использовать вместо JOIN)
WHERE EXISTS/WHERE NOT EXISTS по сути это JOIN; надо смотреть, что удобнее, читабельнее и быстрее
ANI/ALL - можно использовать в подзапросах
LOOP 
